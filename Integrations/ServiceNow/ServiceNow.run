#!/bin/sh

# Basic integration information
NAME="ServiceNow"
FNAME="ServiceNow.py"
VER="1.1"

# ************************************ BEGIN INTEGRATION PARAMETERS ************************************ 
read -r -d '' PARAMS << EOM
[ServiceNow]
# ServiceNow IP or FQDN
SN_HOST = ""
# ServiceNow user name
SN_USER = ""
# ServiceNow password
SN_PASS = ""
EOM
# ************************************ END INTEGRATION PARAMETERS ************************************

# ************************************ BEGIN INTEGRATION CODE ************************************
read -r -d '' CODE << EOM
''''
The following configuration parameters should be added to ./bin/integrations/integration_config.txt:
[ServiceNow]
# ServiceNow IP or FQDN
SN_HOST = ""
# ServiceNow user name
SN_USER = ""
# ServiceNow password
SN_PASS = ""
''''

import os
script_path = os.path.abspath(os.path.join(os.path.dirname( __file__ ), "../.."))

import sys
sys.path.append(os.path.join(script_path, "lib"))
sys.path.append(os.path.join(script_path, "bin/integrations"))

import configparser
import requests

requests.packages.urllib3.disable_warnings()

# './integration_config.txt' can be used to store configuration parameters for your
# integration.  The example below sets two variables based on the parameters in the
# configuration file for the example integration named 'YOUR_INTEGRATION_NAME'.

config = configparser.ConfigParser()
config.read(os.path.join(script_path, "bin/integrations/integration_config.txt"))
SN_HOST = config.get('ServiceNow', 'SN_HOST').strip('"')
SN_USER = config.get('ServiceNow', 'SN_USER').strip('"')
SN_PASS = config.get('ServiceNow', 'SN_PASS').strip('"')

def get_link(url):
    headers = {
        'accept': 'application/json',
        'content-type': 'application/json',
        'cache-control': 'no-cache'
    }
    try:
        res = requests.get(url, headers=headers, auth=(SN_USER, SN_PASS), verify=False)
        if res.status_code == 200:
            return res.json()["result"]["name"]
        else:
            return ""
    except:
        return ""


def ci_query (ip, logger):
    headers = {
        'accept': 'application/json',
        'content-type': 'application/json',
        'cache-control': 'no-cache'
    }
    return_ci = "ServiceNow CI results for {}:".format(ip)
    try:
        # Query CI
        url = "https://{}/api/now/table/cmdb_ci?sysparm_query=ip_address%3D{}".format(SN_HOST.rstrip("/"), ip)
        res = requests.get(url, headers=headers, auth=(SN_USER, SN_PASS), verify=False)
        # If query was successful
        if res.status_code == 200:
            # Results were found
            try:
                res.json()
            except:
                logger.error("Invalid response recieved from ServiceNow: {}".format(res.text))
                return None
            if len(res.json()["result"]) > 0:
                # For each result
                for result in res.json()["result"]:
                    ci_data = "    IP: {}".format(ip)
                    ci_data = "{}\n    FQDN: {}".format(ci_data, result["fqdn"])
                    ci_data = "{}\n    Name: {}".format(ci_data, result["name"])
                    ci_data = "{}\n    Vendor: {}".format(ci_data, result["vendor"])
                    ci_data = "{}\n    Model: {}".format(ci_data, result["model_number"])
                    ci_data = "{}\n    Category: {}".format(ci_data, result["category"])
                    if "link" in result["assigned_to"]:
                        ci_data = "{}\n    Assigned To: {}".format(ci_data, get_link(result["assigned_to"]["link"]))
                    else:
                        ci_data = "{}\n    Assigned To: ".format(ci_data)
                    if "link" in result["department"]:
                        ci_data = "{}\n    Department: {}".format(ci_data, get_link(result["department"]["link"]))
                    else:
                        ci_data = "{}\n    Department: ".format(ci_data)
                    if "link" in result["location"]:
                        ci_data = "{}\n    Location: {}".format(ci_data, get_link(result["location"]["link"]))
                    else:
                        ci_data = "{}\n    Location: ".format(ci_data)
                    if "link" in result["owned_by"]:
                        ci_data = "{}\n    Owned By: {}".format(ci_data, get_link(result["owned_by"]["link"]))
                    else:
                        ci_data = "{}\n    Owned By: ".format(ci_data)
                    ci_data = "{}\n    Short Desc: {}".format(ci_data, result["short_description"])
                    ci_data = "{}\n    Comments: {}".format(ci_data, result["comments"])
                    ci_data = "{}\n    Link: {}".format(ci_data, "https://{}/nav_to.do?uri=%2F{}.do%3Fsys_id%3D{}".format(SN_HOST, result["sys_class_name"], result["sys_id"]))


                    return_ci = "{}\n\n{}".format(return_ci, ci_data)
            # No results were found
            else:
                return_ci = "{}\n\n    No results found".format(return_ci)
        # If query was unsuccessful
        else:
            logger.error('Error {} Reaching {}: {}'.format(res.status_code, res.url, res.reason))
            return None
        return return_ci
    except Exception as e:
        logger.error("Error: {}".format(e))
        return None


def get_data(ticket_info, logger):
    """ This fucntion accepts the SecureChange access request and will return a string which
    will be added to the SecureChange ticket as a comment.  If an error occurs, return None
    and log the error via the logger.
    :param ticket_info: SecureChange ticket information
    :type ticket_info: dict
    :param logger: Tufin logger
    :type logger: pytos.common.logging.logger
    :return: Comment to be added to SecureChange ticket, or None on error
    :rtype: str | None
    """

    # This string will be returned and added as a comment to the SecureChange ticket
    return_str = ""

    # Log integration starting
    logger.info("Running '{}' integration".format(__name__))

    try:

        for req in ticket_info['Requests']:
            for src in req['Sources']:
                if src['Cidr'] == '32':
                    return_str = '{}\n\n{}'.format(return_str, ci_query(src["Ip"], logger))
            for dst in req['Destinations']:
                if dst['Cidr'] == '32':
                    return_str = '{}\n\n{}'.format(return_str, ci_query(dst["Ip"], logger))

    except Exception as e:

        # Log the error and return an empty string
        logger.error("Error: {}".format(e))
        return None

    # Log integration completing
    logger.info("{} integration completed".format(__name__))

    # Return comment
    return return_str
EOM
# ************************************ END INTEGRATION CODE ************************************

# Print help message
Print_Help() {
echo
cat << EOH >&2
${NAME} Installer
Integration Version: ${VER}
Options:
  --help                     Print this message
  --target <dir> (Required)  Root installation directory of the ticket enrichment script
Example:
  $0 --target /usr/local/securechange_ticket_enrichment
EOH
}

while :; do
    case $1 in
        -h|--help) Print_Help; exit 1
        ;;
        -t|--target) target_dir="$2"            
        ;;
        *) break
    esac
    shift
done

# If the target directory is not specified, show help and exit
if [ ${#target_dir} -le 0 ]
then
    echo
    echo "ERROR: Target directory must be specified!"
    Print_Help
    exit 1
fi

# If the target directory is not valid, show help and exit
if ! [[ -d "$target_dir" ]]
then
    echo
    echo "ERROR: '$target_dir' does not exist!"
    Print_Help
    exit 1
fi

# If the target directory is not the ticket enrichment script root directory, show help and exit
if ! [[ -f "$target_dir/bin/ticket_enrichment.py" ]]
then
    echo
    echo "ERROR: '$target_dir/bin/ticket_enrichment.py' not found!"
    echo "Target directory must be the root of the ticket enrichment script directory"
    Print_Help
    exit 1
fi

#Begin installation

# Display confirmation message
echo 
echo "You are installing the $NAME integration (v $VER) to '$target_dir/bin/integrations/$FNAME'"
echo 
read -p "Continue with installation? [y/N]: " -n 1 -r
echo
if ! [[ $REPLY =~ ^[Yy]$ ]]
then
    exit 0
fi

echo
echo "Installing..."

# If the configuration parameters do not already exist, add them
if grep -q "[Infoblox_Type_Check]" "$target_dir/bin/integrations/integration_config.txt"
then
    echo "Configuration for $NAME already exists!  Preserving existing configuration..."
else
    echo "Adding new configuration parameters..."
    printf "%s" "$PARAMS" >> "$target_dir/bin/integrations/integration_config.txt"
fi

echo "Installing the new integration to '$target_dir/bin/integrations/$FNAME'..."
printf "%s" "$CODE" >> "$target_dir/bin/integrations/$FNAME"

echo "Setting appropriate permissions..."
chown apache "$target_dir/bin/integrations/$FNAME"
chgrp tomcat "$target_dir/bin/integrations/$FNAME"

echo
echo "$NAME installation completed!"
echo
echo "*** Complete the setup by configuring the $NAME integration parameters in $target_dir/bin/integrations/integration_config.txt ***"
echo
